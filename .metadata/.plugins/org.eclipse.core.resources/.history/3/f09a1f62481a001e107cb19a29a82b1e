-- 조인을 사용할 때는 테이블간 관계를 먼저 확인해야한다
-- EMP 테이블에서 사원번호로 DEPT 테이블의 지역 검색
SELECT * FROM tbl_dept;
SELECT * FROM tbl_emp;

INSERT INTO TBL_EMP VALUES (1004, '맹구', '개발부', 3000, SYSDATE, 2500, 20);

-- ERD 확인하기
-- 두 테이블간 관계에서 DEPT_NO를 FK로 사용하고 있으므로
-- DEPT_NO를 비교하여 등가조인을 사용할 수 있다

-- DEPT 테이블의 행이 적은데 DEPT 후행 테이블로 왔다 효율이 좋지 않다
-- 별칭을 반드시 줘야 ON 절에서 구분이 가능하다
SELECT * FROM TBL_EMP E JOIN TBL_DEPT D
ON E.DEPT_NO = D.DEPT_NO;

SELECT * FROM TBL_DEPT D JOIN TBL_EMP E
ON D.DEPT_NO = E.DEPT_NO;

-- 지역을 검색하라고 했으니 JOIN에서 나온 결과의 가상테이블에서
-- 내가 원하는 정보만 뽑아온다
SELECT E.EMP_NAME, DEPT_LOC FROM TBL_DEPT D JOIN TBL_EMP E
ON D.DEPT_NO = E.DEPT_NO;


-- [실습]
-- 1. PLAYER 테이블에서 송종국 선수가 속한 TEAM의 전화번호 검색하기
-- 테이블 데이터와 관계확인
SELECT * FROM PLAYER p2 ;
SELECT * FROM TEAM p2 ;

--일단 합치기
SELECT P.PLAYER_NAME 이름, T.TEL  FROM PLAYER p JOIN TEAM t 
ON P.TEAM_ID = T.TEAM_ID 
WHERE P.PLAYER_NAME = '송종국';

--WHERE 절 안쓰면 좋지만 필요하다면 쓴다

--팀아이디 가져오기 
SELECT T.TEAM_ID , P.PLAYER_NAME 이름, T.TEL  FROM PLAYER p JOIN TEAM t 
ON P.TEAM_ID = T.TEAM_ID 
WHERE P.PLAYER_NAME = '송종국';

-- 2. JOBS 테이블에서 JOB_ID로 직원들의 JOB_TITLE, EMAIL, 성, 이름 조회
SELECT * FROM JOBS j; 

SELECT J.JOB_TITLE ,E.EMAIL EMAIL, LAST_NAME || ' ' ||FIRST_NAME 이름 
FROM JOBS j JOIN  EMPLOYEES e 
ON E.JOB_ID = J.JOB_ID ; 

-- 3. EMPLOYEES 테이블에서 HIREDATE가 1998~2000년까지인 사원의 정보와 부서명 검색
SELECT * FROM  EMPLOYEES e2 ;

SELECT E.FIRST_NAME ||' '||E.LAST_NAME 이름 , D.DEPARTMENT_NAME  
FROM EMPLOYEES e JOIN  DEPARTMENTS d 
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID 
WHERE E.HIRE_DATE BETWEEN '2001-01-01' AND '2003-12-31'

SELECT E.FIRST_NAME ||' '||E.LAST_NAME 이름 , D.DEPARTMENT_NAME  
FROM EMPLOYEES e JOIN  DEPARTMENTS d 
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID 
AND E.HIRE_DATE BETWEEN '2001-01-01' AND '2003-12-31'

-- 1. 축구 선수들 중에서 각 팀별로 키가 가장 큰 선수들의 전체 정보 조회

-- 위 문제를 JOIN 없이 풀기
-- (A, B) IN (C, D) : A = C AND B = D

	SELECT TEAM_ID  , MAX(HEIGHT) 
	FROM PLAYER p 
	GROUP BY TEAM_ID 
--두컬럼 조회

SELECT
	*
FROM
	PLAYER p
WHERE
	(TEAM_ID ,HEIGHT) IN(
	SELECT
		TEAM_ID ,MAX(HEIGHT)
	FROM
		PLAYER p
	GROUP BY
		TEAM_ID)
	ORDER BY TEAM_ID;

--join이용
SELECT 
FROM PLAYER p 

-- 2. EMPLOYEES 테이블의 각 사원의 매니저의 부서명 조회
SELECT JOB_ID  
FROM EMPLOYEES e; 

SELECT * 
FROM  EMPLOYEES e JOIN  JOBS j  ON E.JOB_ID  = J.JOB_ID


SELECT E.FIRST_NAME || ' '|| E.LAST_NAME NAME, J.JOB_TITLE  
FROM  EMPLOYEES e 
JOIN  JOBS j  ON E.JOB_ID  = J.JOB_ID

--자기조인 예제
SELECT *FROM EMPLOYEES e ;

SELECT E.FIRST_NAME, M.FIRST_NAME
FROM EMPLOYEES e 
JOIN EMPLOYEES M ON E.MANAGER_ID = M.MANAGER_ID 

SELECT E.FIRST_NAME||' '||E.LAST_NAME ,( SELECT J.JOB_TITLE  
FROM EMPLOYEES M
JOIN  JOBS j  ON M.JOB_ID  = J.JOB_ID
WHERE M.EMPLOYEE_ID = E.MANAGER_ID)AS MANAGER_TITLE
FROM EMPLOYEES e ;



-- 3. EMPLOYEES 테이블의 모든 사원의 이름과 부서명 조회
SELECT E.*
FROM EMPLOYEES e 

SELECT E.FIRST_NAME || ' '||E.LAST_NAME 이름, D.DEPARTMENT_NAME 
FROM EMPLOYEES e JOIN DEPARTMENTS d ON E.DEPARTMENT_ID =D.DEPARTMENT_ID 

-- 4. EMPLOYEES 테이블에서 매니저가 없는 사원의 이름과 직무 조회
SELECT *
FROM EMPLOYEES e ;

SELECT * 
FROM DEPARTMENTS d ;

SELECT E.FIRST_NAME || ' '||E.LAST_NAME 이름, D.DEPARTMENT_NAME ,D.MANAGER_ID 
FROM DEPARTMENTS d JOIN EMPLOYEES e ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
AND E.MANAGER_ID IS NULL;

SELECT E.FIRST_NAME || ' '||E.LAST_NAME 이름, D.DEPARTMENT_NAME ,D.MANAGER_ID 
FROM DEPARTMENTS d JOIN EMPLOYEES e ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
AND D.MANAGER_ID IS NULL;


-- 5. EMPLOYEES 테이블에서 직무별 평균 급여 조회
SELECT E.DEPARTMENT_ID  , AVG(E.SALARY) 
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID 
GROUP BY E.DEPARTMENT_ID;

SELECT DEPARTMENT_ID ,AVG(SALARY)
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID ;

SELECT D.DEPARTMENT_NAME
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

-- 6. EMPLOYEES 테이블에서 매니저별로 직속 직원 사원수 조회
SELECT *
FROM EMPLOYEES e ;

SELECT MANAGER_ID ,COUNT(MANAGER_ID) 
FROM EMPLOYEES e
GROUP BY MANAGER_ID ;

SELECT  E.MANAGER_ID ,COUNT(D.MANAGER_ID) 
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON E.MANAGER_ID =D.MANAGER_ID 
GROUP BY E.MANAGER_ID 
ORDER BY E.MANAGER_ID ;

SELECT  E.JOB_ID  ,COUNT(D.MANAGER_ID)  
FROM EMPLOYEES e JOIN DEPARTMENTS d JOIN JOBS j
ON E.job_ID =D.job_ID =j.JOB_ID 
GROUP BY E.JOB_ID  
ORDER BY E.JOB_ID  ;