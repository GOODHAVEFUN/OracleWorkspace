--0. 복습
--	SLECET [DISTINCT] 컬럼명 [AS 별칭] FROM 테이블명
--	ORDER BY 컬럼명 [ASC or DESC];
 
-- dual 테이블 : 다른 테이블을 참조할 필요가 없이 값을 확인하고 싶을 때 사용할 수 있는 테이블
-- 오라클에서 지원해준다

--1. SQL
--자료형(Data Type) : 값의 종류
--	문자 : char / varchar2
--	숫자 : number
--	날짜 : date


--2. 연산자
--	연산자 피연산자 자리에 어떤 타입의 값이 오는지,
--	연산자가 어떻게 동작하는지,
--	연산의 결과가 어떤 타입의 값인지 아는것이 중요하다.

--	연결연산자
--		a||b(concatenation, 연쇄) : a와 b를 연결해준다
--		숫자, 날짜, 문자 타입이 피연산자로 올 수 있으며
--		앞에 있는 값과 뒤에 있는 값을 연결한다
--		연결의 결과는 문자타입이다
SELECT 10 || 20 FROM dual;
--SELECT '안녕'||'하세요' FROM dual;
-- 결과가 무슨 타입인지 확인하는 것이 중요하다!!

SELECT first_name || last_name 성함
FROM employees;

SELECT hire_date || '안녕'
FROM employees;

SELECT hire_date || ' '
FROM employees;



--[실습] 사원의 이름과 메일주소 출력하기
-- 이 때 이름은 first_name과 last_name이 띄어쓰기로 이어져있고
-- 메일의 주소는 사원메일주소@koreait.com이다
SELECT first_name || ' ' || last_name 이름,
email || '@koreait.com' 이메일
FROM employees;

--	산술연산자
--		+, -, *, /
--		피연산자에 숫자타입을 사용한다
--		각각 덧셈, 뺄셈, 곱셈, 나눗셈을 연산한다
--		연산의 결과는 숫자타입이다
--
--		+, -는 날짜타입도 가능하다
--		날짜와 숫자간의 +, - 연산 결과는 날짜타입이다
--		날짜와 날짜간의 +, - 연산 결과는 숫자타입이다
SELECT employee_id, employee_id + 10,
	employee_id - 10,
	employee_id * 10,
	employee_id / 10
FROM employees;

-- [실습] 직원의 이름, 봉급, 인상봉급, 감축봉급을 조회하기
-- 이름은 성과 함께 띄어쓰기로 연결되어있다
-- 인상봉급은 기존봉급의 10% 증가되었고 -> 1.1
-- 감축봉급은 기존봉급의 10% 감소되었다 -> 0.9
-- 결과를 기존 봉급 오름차순으로 정렬하여 조회한다

SELECT first_name || ' ' ||last_name 이름,
	salary 봉급,
	salary * 1.1 인상봉급,
	salary * 0.9 감축봉급
FROM EMPLOYEES
ORDER BY salary;

-- 날짜타입의 산술연산
-- (1) 날짜와 숫자
SELECT hire_date,
	hire_date + 10,	-- 10일 더해준다
	hire_date - 10	-- 10일 빼준다
FROM EMPLOYEES;

-- sysdate
-- 현재 날짜와 시간정보를 가지고 있으며
-- 오라클에서 기본적으로 제공한다
SELECT sysdate FROM dual;

-- (2) 날짜와 날짜의 연산
-- 날짜 - 날짜 : 며칠이 지났는지 결과로 나온다
-- 연산결과는 숫자타입이다
--	sysdate + hire_date 오류발생
SELECT hire_date, sysdate,
	sysdate - hire_date
FROM employees;

-- 시간을 연산할 때는 시간을 일로 환산해서 진행한다
-- 12시간 -> 0.5일 / 24시간 -> 1일
-- 날짜와 숫자 연산에서 기본적으로 숫자는 일수를 의미하기 때문에
-- 시간, 분 단위로 연산하고 싶다면 일(24h)로 환산해야한다
SELECT SYSDATE,
	sysdate + 12/24,
	sysdate - 30 / 60 / 24
FROM dual;

--	관계연산자
--		a > b :
--		a < b :
--		a >= b :
--		a <= b : 
--		a = b : a와 b가 같다
--		a <> b, a != b : a와 b가 같지않다(sql에서는 <> 표준이다)
--	where 절 : 원하는 행을 조회하거나 연산처리한다
--		SELECT 컬럼명 FROM 테이블명 WHERE 조건;
--별칭을 설정할 경우에는 명령어들의 순서를 잘 생각해야한다
--SELECT first_name 이름, last_name 성, salary 봉급	 3. 각 컬럼에 별칭을 붙여서 조회	
--FROM employees					 1. EMPLOYEES 테이블에서
--WHERE 봉급 >= 10000				 2. 봉급을 찾아라(오류발생)
--ORDER BY 봉급; 					 4. 봉급 오름차순으로 정렬
--
--=> 별칭이 생기기 전에 WHERE절이 실행되므로 별칭이 아닌 컬럼명으로 사용해야한다

-- 3) 관계연산자
-- WHERE 절 사용

-- 직원의 이름, 성, 봉급을 조회한다
-- 단, 봉급이 10000이상인 직원 정보만 조회한다
SELECT first_name, last_name, salary
FROM employees
WHERE salary >= 10000;

SELECT first_name 이름, last_name 성, salary 봉급
FROM employees
WHERE SALARY >= 10000
ORDER BY 봉급; 
-- WHERE절에서 봉급이라는 컬럼을 못찾는 오류가 발생한다
-- 명령어가 작동하는 순서가 있기 때문이다


-- 직원의 이름, 성을 조회한다
SELECT first_name, last_name
FROM EMPLOYEES
WHERE FIRST_NAME = 'David';
-- SQL문은 대소문자를 구분하지 않지만 데이터는 대소문자를 구분한다

--	SQL연산자
--		BETWEEN a AND b : a이상 b이하인 조건
--		IN(a, b, c, ..) : a 혹은 b 혹은 c 혹은 .. 일 조건
--		LIKE	: 문자열 패턴을 검색하는데 사용하는 연산자
--			%(아무거나)
--			_(자리수)
--
--		IS NULL/IS NOT NULL
--		NULL	: 값이 없음을 나타내는 값
--		NULL값을 확인할 때는 관계연산자에 =, <>로 사용할 수 없다(조회되지 않음)
--
--		ANY(a, b, c) : a, b, c 중 아무거나 만족하면
--		ALL(a, b, c) : a, b, c를 전부 만족하면		
--		ANY, ALL은 비교연산자( =, <, >)와 함께 쓰임

-- 4. SQL 연산자
-- employess 테이블에서 salary가 10000이상 12000이하인 직원의
-- first_name, last_name, salary를 salary 오름차순으로 조회하기
SELECT first_name, last_name, salary
FROM employees
WHERE salary BETWEEN 10000 AND 12000
ORDER BY salary;

-- IN
-- employees 테이블에서
-- salary가 10000 혹은 11000 혹은 12000인 직원의
-- first_name, last_name, salary를
-- salary 내림차순으로 정렬하여 조회
SELECT first_name, last_name, salary
FROM employees
WHERE salary IN(10000, 11000, 12000)
ORDER BY salary DESC;

-- LIKE
-- % : ~아무거나
SELECT first_name
FROM employees
WHERE first_name LIKE '%e'; 
-- %는 아무거나 해석, %e 아무거나 있어도되는데 마지막에 e로 끝나는 문자값을 의미

-- _ : 자리수
SELECT first_name
FROM employees
WHERE first_name LIKE '____e'
-- _ _ _ _ e 앞에 4자리수 4개의 글자가 있고 마지막에 e로 끝나는 문자값을 의미

SELECT first_name
FROM employees
WHERE first_name LIKE '%e_n%';
-- e를 포함하는 문자를 의미
-- %사이에 여러 글자를 넣어도 된다
-- %en% en을 포함하는 문자를 의미
-- %e%n% e와 n을 포함하는 문자를 의미(순서있음)
-- %e_n% e와 n사이에 한글자가 더 있는 문자를 의미

-- 0과 없다 구별 : NULL
-- NULL은 연산하면 결과가 NULL이다
SELECT NULL + 10
FROM dual;

-- employees 테이블에서
-- comminssion_id가 NULL인 직원의
-- 이름, 성, commission_pct 조회하기
SELECT first_name, last_name, commission_pct
FROM employees
WHERE COMMISSION_PCT IS NULL;
-- NULL값이 들어있는지 검사할 때는 = 같다라는 비교연산자로 확인할 수 없다
-- 반드시 IS NULL을 사용해야한다

SELECT first_name, last_name, commission_pct
FROM employees
WHERE COMMISSION_PCT IS NOT NULL; --<> 안된다

-- ANY(a, b, c)
SELECT salary
FROM employees
WHERE salary = ANY(10000, 11000, 12000)
ORDER BY salary;


-- ALL(a, b, c)
SELECT salary
FROM employees
WHERE salary > ALL(10000, 11000, 12000)
ORDER BY salary;

--	논리연산자
--		피연산자 자리에 조건이 온다
--		여러개의 조건을 연결할 때 사용한다
--		a AND b	: a조건 그리고 b조건을 만족하는 조건
--			  a와 b 모두 True -> True
--		a OR b	: a조건 또는 b조건을 만족하는 조건
--			  a와 b 둘 중 하나라도 True -> True
--		NOT a	: a조건을 만족하지 않는 조건
--			  True -> False, False -> True
-- 5. 논리연산자
-- a AND b, a OR b, NOT a

-- employees 테이블에서 부서id가 80이면서 봉급이 10000이상인 직원들의
-- 이름, 성, 봉급, 부서id를 봉급 오름차순으로 조회하기

SELECT first_name, last_name, salary, department_id
FROM employees
WHERE DEPARTMENT_ID = 80 AND salary >= 10000
ORDER BY SALARY;
-- AND, OR 확인하기

-- NOT 연산자
SELECT first_name
FROM employees
--WHERE NOT first_name = 'David';
WHERE first_name <> 'David';

3. CRUD
	기본적인 데이터 처리 기능
	C(Create) 생성, R(Read) 읽기, U(Update) 수정, D(Delete) 삭제

SQL문(쿼리문)의 종류
	SQL 명령어의 성격에 따라 분류한 것이다
	1. DDL(Data Definition Language) : 데이터 정의 언어
		테이블 조작 또는 제어 관련 쿼리문
		
	2. DML(Data Manipulation Language) : 데이터 조작 언어
		데이터를 조작하는 쿼리문

	3. DCL(Data Control Language) : 데이터 제어 언어(권한)
	4. TCL(Transction Control Language) : 트랜잭션 제어 언어

--DML : 데이터 조작언어
--SELECT : 조회
--	SELECT 컬럼명 FROM 테이블명 [WHERE 조건식];
--
--INSERT : 추가
--	원하는 컬럼만 골라서 값을 저장할 때 사용
--	INSERT INTO 테이블명(컬럼명, ...) VALUES (값, ..);
--	
--	모든 컬럼에 값을 넣을 때 사용
--	INSERT INTO 테이블명 VALUES (값,...);
--
--UPDATE : 수정
--	UPDATE 테이블명 SET 컬럼명1 = 값1, 컬럼명2 = 값2, ... [WHERE 조건식];
--	WHERE 절을 생략하면 내가 선택한 컬럼의 모든 행에 값이 저장된다
--
--DELETE : 삭제
--	DELETE FROM 테이블명 [WHERE 조건식];
--	WHERE를 생략하면 모든 값이 삭제된다(주의)

SELECT * FROM TBL_MEMBER;

INSERT INTO TBL_MEMBER(MEMBER_NAME, MEMBER_AGE)
VALUES('김영선', 20);

INSERT INTO TBL_MEMBER
VALUES('홍길동', 22);

-- 짱구 이름을 강감찬 수정
UPDATE TBL_MEMBER SET MEMBER_NAME = '홍길동' WHERE MEMBER_AGE = 20;
-- UPDATE를 사용할 때는 WHERE 조건을 주지 않으면 전체 데이터의 이름이 변경이 된다
-- 여기서는 =는 관계연산자가 아니다

DELETE FROM TBL_MEMBER;
-- 삭제할 때 WHERE절을 생략하면 모든 행의 데이터가 지워진다(주의)

-- [과제] 동물이름, 나이(5개만) 추가
CREATE TABLE ANIMAL(
	ANIMAL_NAME VARCHAR2(1000),
	ANIMAL_AGE NUMBER
);

INSERT INTO ANIMAL
VALUES('호랑이', 2);
INSERT INTO ANIMAL
VALUES('앵무새', 12);
INSERT INTO ANIMAL
VALUES('토끼', 1);
INSERT INTO ANIMAL
VALUES('고양이', 5);
INSERT INTO ANIMAL
VALUES('강아지', 7);

SELECT *
FROM ANIMAL; 



CREATE TABLE TBL_MEMBER(
	MEMBER_NAME VARCHAR2(1000),
	MEMBER_AGE NUMBER
);


CREATE TABLE TBL_STUDENT(
	STUDENT_NUMBER NUMBER,
	STUDENT_NAME VARCHAR2(1000),
	STUDENT_MATH NUMBER,
	STUDENT_ENG NUMBER,
	STUDENT_KOR NUMBER,
	STUDENT_GRADE VARCHAR2(1000)
	);




--1. 직원들 중 봉급이 5000 이상인 직원들의 모든 정보 조회하기
SELECT * FROM EMPLOYEES WHERE SALARY >= 5000;

--2. 직원들 중 부서번호가 30번인 직원들의 이름과 입사일 조회하기
SELECT first_name, hire_date
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;

--3. 직원들 중 성이 Smith인 직원들의 이름과 봉급 조회하기
SELECT first_name, salary
FROM EMPLOYEES
WHERE last_name = 'Smith';

--4. 직원들 중 봉급이 3000미만이거나 10000이상인 직원들의 이름과 봉급 조회하기
-- 논리연산자 OR
SELECT first_name, salary
FROM EMPLOYEES
WHERE salary < 3000 OR salary >= 10000;

--5. 직원들 중 이름이 A로 시작하는 직원들의 이름과 성 조회하기
-- like
SELECT first_name, last_name
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'A%';

--6. 직원들 중 성에 o가 포함되고 이름이 4글자인 직원들의 이름과 성, 부서번호 조회하기
-- like, and
SELECT first_name, last_name, department_id
FROM EMPLOYEES
WHERE last_name LIKE '%o%' AND first_name LIKE '____';

--7. 직원들 중 이름이 s로 끝나고 성이 J로 시작하는 직원들의 이름과 성 조회하기
SELECT first_name, last_name
FROM EMPLOYEES
WHERE first_name LIKE '%s' AND last_name LIKE 'J%';






























