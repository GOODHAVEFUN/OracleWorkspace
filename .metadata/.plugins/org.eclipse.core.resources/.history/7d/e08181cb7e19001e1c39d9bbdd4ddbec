SELECT
	*
FROM
	PLAYER;

SELECT
	AVG(HEIGHT)
FROM
	PLAYER p ;

SELECT
	MAX(HEIGHT)
FROM
	PLAYER p ;

SELECT
	MIN(HEIGHT)
FROM
	PLAYER p ;

SELECT
	SUM(HEIGHT)
FROM
	PLAYER p ;

SELECT
	COUNT(HEIGHT)
FROM
	PLAYER p ;

/*PLAYER 테이블에서 HEIGHT 개수검색 
 * */
SELECT
	COUNT(NVL(HEIGHT, 0))
FROM
	PLAYER 
	;
	
/* ORDER BY*/
SELECT
	*
FROM
	PLAYER
ORDER BY
	HEIGHT ;

SELECT
	*
FROM
	PLAYER p
WHERE
	HEIGHT IS NOT NULL
ORDER BY
	HEIGHT DESC;

--GROUP BY : ~별(예: 포지션 별 평균키)
/*
 * GROUP BY 컬럼명 HAVING 조건식
 * WHERE 절은 ㅈ;ㅂ계함수 사용이 불가능 하지만 HAVING은 가능하다
 * WHERTE절에 우선적으로 처리할 조건식을 작성해야 속도가 빠르다
 * 
 * */

--PLAYER 테이블에 포지션 종류 검색
SELECT
	DISTINCT "POSITION"
FROM
	PLAYER p ;

--GROUP BY 로 포지션 종류를 보게되면 오류가 발생
--SELECT  * FROM PLAYER;
--GROUP BY "POSITION"

SELECT
	"POSITION"
FROM
	PLAYER p
GROUP BY
	"POSITION";

--포지션별 평균키 구하기
SELECT
	"POSITION",
	AVG(HEIGHT)
FROM
	PLAYER p
GROUP BY
	"POSITION" ;

--PLAYER 테이블에서 몸무게가 80이사인 선수들의 평균키가 180초과인 포지션 검색
SELECT
	"POSITION"
FROM
	PLAYER
WHERE
	WEIGHT >= 80
GROUP BY
	"POSITION"
HAVING
	AVG(HEIGHT)>180

SELECT
	POSITION ,
	MIN(WEIGHT) ,
	AVG(HEIGHT)
	FROM PLAYER
WHERE
	WEIGHT >= 80
GROUP BY
	"POSITION"
HAVING
	AVG(HEIGHT) > 180;

-- EMPLOYEES 테이블에서 JOB_ID별 평균 SALAY가 10000미만인 JOB_ID검색
-- JOB_ID 는 알파벳 순으로 정렬(오름차순)
SELECT
	JOB_ID ,
	AVG(SALARY)
FROM
	EMPLOYEES e
GROUP BY
	JOB_ID
HAVING
	AVG(SALARY)<10000
ORDER BY
	JOB_ID ;

-- [실습] PLAYER 테이블
-- 1. PLAYER_ID가 2007로 시작하는 선수들 중 POSITION별 평균 키를 조회
SELECT
	"POSITION" ,
	AVG(HEIGHT)
FROM
	PLAYER
WHERE
	PLAYER_ID LIKE '2007%'
GROUP BY
	"POSITION";

-- +) PLAYER 테이블에서 POSITION이 DF인것만 조회 2번문제와는 다름
SELECT
	*
FROM
	PLAYER
WHERE
	"POSITION" = 'DF';


-- 2. 선수들 중 포지션이 DF 선수들의 평균키를 TEAM_ID 별로 조회하고 평균 키 오름차순으로 정렬하기
SELECT
	TEAM_ID,
	AVG(HEIGHT)
FROM
	PLAYER
WHERE
	"POSITION" = 'DF'
GROUP BY
	TEAM_ID
ORDER BY
	AVG(HEIGHT) ;

-- 3. 포지션이 MF인 선수들의 입단연도 별 평균 몸무게, 평균 키를 구한다 컬럼명은 입단연도, 평균 몸무게, 평균 키로 표시한다
--    입단연도를 오름차순으로 정렬
SELECT
	JOIN_YYYY 입단연도 ,
	AVG(WEIGHT) "평균 몸무게",
	AVG(HEIGHT)"평균 키"
FROM
	PLAYER
WHERE
	"POSITION" = 'MF'
GROUP BY
	JOIN_YYYY
ORDER BY
	입단연도;




-- EMPLOYEE 테이블
-- 1. 핸드폰 번호가 515로 시작하는 사원들의 JOB_ID별 SALARY 평균을 구한다
--    조회 컬럼은 부서, 평균 급여로 표시한다
--    평균 급여가 높은 순으로 정렬한다
SELECT
	JOB_ID 부서 ,
	AVG(SALARY) "평균 급여"
FROM
	EMPLOYEES e
WHERE
	PHONE_NUMBER LIKE '515%'
GROUP BY
	JOB_ID
ORDER BY
	"평균 급여" DESC;

-- 2. COMMISSION_PCT 별 평균 급여를 조회한다
--    COMMISSION_PCT를 오름차순으로 정렬하며 HAVING 절을 사용하여 NULL은 제외한다
SELECT
	COMMISSION_PCT,
	AVG(SALARY)
FROM
	EMPLOYEES
GROUP BY
	COMMISSION_PCT
HAVING
	COMMISSION_PCT IS NOT NULL
ORDER BY
	COMMISSION_PCT;

SELECT
	*
FROM
	EMPLOYEES;

--서브쿼리
--PLAYER 테이블에서 전체 평균키 와 포지션 별 평균 키 구하기
SELECT AVG(HEIGHT) FROM PLAYER p ;

SELECT
	POSITION ,
	AVG(HEIGHT)
FROM
	PLAYER p
GROUP BY
	POSITION;

--그룹으로 묶은 행의 수보다 적은 행을 같이 조회하는 것은 가능하다
--그런나 그룹으로 묶은 행의 수보다 많은 행을 조회하는것은 불가능하ㄱ다

-- 서브쿼리의 행의 수가 메인 쿼리 보다 많음
SELECT
	POSITION ,
	AVG(HEIGHT),
	(
	SELECT
		*
	FROM
		PLAYER)
FROM
	PLAYER 
WHERE
	"POSITION" IS NOT NULL
GROUP BY
	"POSITION" 

SELECT
	"POSITION" ,
	AVG(HEIGHT) "그룹별  평균 키",
	(
	SELECT
		AVG(HEIGHT)
	FROM
		PLAYER) "전체평균키"
FROM
	PLAYER p
WHERE
	"POSITION" IS NOT NULL
GROUP BY
	"POSITION" ;

--PLAYER 테이블에서 TEAM_ID 가 'K01'인  선수 중 POSITION이 'GK'인 선수 조회하기(SUB쿼리 이용)
SELECT
	*
FROM
	PLAYER p
WHERE
	TEAM_ID = 'K01'
	AND "POSITION" = 'GK';

SELECT
	*
FROM
	PLAYER p
WHERE
	TEAM_ID = 'K01';

SELECT
	*
FROM
	PLAYER p
WHERE
	"POSITION" = 'GK';

SELECT
	*
FROM
	(
	SELECT
		*
	FROM
		PLAYER p
	WHERE
		TEAM_ID = 'K01' )
WHERE
	"POSITION" = 'GK';

--조건에 SUB쿼리 넣음
--PLAYER 테이블에서 푱균 몸무게보다 더많이 나가는 선수를 검색
SELECT AVG(WEIGHT) FROM PLAYER; 

SELECT
	*
FROM
	PLAYER
WHERE
	WEIGHT >(
	SELECT
		AVG(WEIGHT)
	FROM
		PLAYER
);

--결과가 맞는지 확인
SELECT
	MIN(WEIGHT)
	FROM PLAYER p
WHERE
	WEIGHT >(
	SELECT
		AVG(WEIGHT)
	FROM
		PLAYER 
);

-- [실습]
-- 1. PLAYER 테이블에서 정남일 선수사 소속된 팀의 선수를 조회
SELECT TEAM_ID FROM PLAYER p WHERE PLAYER_NAME  = '정남일';

SELECT *  FROM PLAYER p 
WHERE TEAM_ID = (SELECT TEAM_ID FROM PLAYER p WHERE PLAYER_NAME  = '정남일');

--2 . PLAYER 테이블에서 평균 키보다 작은 선수 조회
SELECT AVG(HEIGHT) FROM PLAYER p;
--평균키 계산
SELECT *  FROM PLAYER p 
WHERE HEIGHT < (SELECT AVG(HEIGHT) FROM PLAYER p);
--평균키보다 작은 선수


--3. SCHEDULE 테이블에서 경기 일정이 20120501 ~ 20120502 사이에 있는 경기장 전체 정보 조회
SELECT STADIUM_ID  FROM SCHEDULE
WHERE SCHE_DATE BETWEEN  20120501 AND 20120502;

--문자비교로 결과 확인
SELECT
	*
FROM
	STADIUM s
WHERE
	STADIUM_ID IN (
	SELECT
		STADIUM_ID
	FROM
		SCHEDULE
	WHERE
		SCHE_DATE BETWEEN 20120501 AND 20120502);


--TCL 버튼을 클릭하여 매뉴얼 커밋으로 변경하고 아래 실습 후 반드시 ROLLBACK하기

-- 4. PLAYER 테이블에서 NICKNAME이 NULL인 선수들을 정태민 선수의 닉네임으로 바꾸기
SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민';

UPDATE  PLAYER 
SET  NICKNAME  = (SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민')
WHERE NICKNAME = NULL ;

SELECT  * FROM PLAYER p ;

-- 5. EMPLOYEES 테이블에서 평균 급여보다 낮은 사원들의 급여를 20% 인상
SELECT AVG(SALARY) FROM EMPLOYEES e ;

UPDATE EMPLOYEES 
SET SALARY = SALARY*1.2
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

SELECT * FROM EMPLOYEES e ;

-- 6. PLAYER 테이블에서 평균 키보다 큰 선수들을 삭제
SELECT AVG(HEIGHT) FROM PLAYER;

DELETE PLAYER 
WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);

SELECT * FROM PLAYER p ;



