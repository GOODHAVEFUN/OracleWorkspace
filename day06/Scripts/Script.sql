SELECT * FROM tbl_book;
SELECT * FROM TBL_MEMBER;

-- 회원정보 추가
INSERT INTO TBL_MEMBER VALUES(1, '홍길동', 22, '010-1111-1111', '서울시');
INSERT INTO TBL_MEMBER VALUES(2, '신짱구', 22, '010-1234-1234', '서울시');
INSERT INTO TBL_MEMBER VALUES(3, '김철수', 22, '010-3333-3333', '경기도');

SELECT * FROM TBL_MEMBER;

-- 책 정보 추가
INSERT INTO TBL_BOOK VALUES(1, '셜록', '추리', NULL);
INSERT INTO TBL_BOOK VALUES(2, 'DBMS 완전정복', 'IT', NULL);
INSERT INTO TBL_BOOK VALUES(3, '하면된다', '인문학', NULL);

SELECT * FROM TBL_BOOK;

-- 회원 이름 수정
UPDATE TBL_MEMBER 
SET MEMBER_NAME = '박수정'
WHERE MEMBER_NUMBER = 2;

-- 책 대여하기
UPDATE TBL_BOOK
SET MEMBER_NUMBER = 2
WHERE BOOK_NUMBER = 1;

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 3
WHERE BOOK_NUMBER = 2;

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 2
WHERE BOOK_NUMBER = 3;

SELECT * FROM TBL_BOOK;

-- 책 대여한 회원 번호 수정
UPDATE TBL_BOOK
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 3;

-- 회원 삭제
-- NULL값으로 변경 후 BOOK_NUMBER = 3
UPDATE TBL_BOOK
SET MEMBER_NUMBER = NULL
WHERE BOOK_NUMBER = 3;

-- DELETE
DELETE FROM TBL_BOOK
WHERE BOOK_NUMBER = 3;

SELECT * FROM TBL_BOOK;

-- 시퀀스 생성
CREATE SEQUENCE SEQ_BOOK;
CREATE SEQUENCE SEQ_MEMBER;

-- 시퀀스 삭제
DROP SEQUENCE SEQ_MEMBER;

-- 테이블 데이터 모두 삭제하기
DELETE FROM TBL_BOOK;
DELETE FROM TBL_MEMBER;

-- 시퀀스 사용하여 데이터 넣기
-- 회원정보 추가
INSERT INTO TBL_MEMBER VALUES(SEQ_MEMBER.NEXTVAL, '홍길동', 22, '010-1111-1111', '서울시');
INSERT INTO TBL_MEMBER VALUES(SEQ_MEMBER.NEXTVAL, '신짱구', 22, '010-1234-1234', '서울시');
INSERT INTO TBL_MEMBER VALUES(SEQ_MEMBER.NEXTVAL, '김철수', 22, '010-3333-3333', '경기도');

SELECT * FROM TBL_MEMBER;

-- 책 정보 추가
INSERT INTO TBL_BOOK VALUES(SEQ_BOOK.NEXTVAL, '셜록', '추리', NULL);
INSERT INTO TBL_BOOK VALUES(SEQ_BOOK.NEXTVAL, 'DBMS 완전정복', 'IT', NULL);
INSERT INTO TBL_BOOK VALUES(SEQ_BOOK.NEXTVAL, '하면된다', '인문학', NULL);

SELECT * FROM TBL_BOOK;

/*
 * 삭제 시 참조중인 자식 FK가 있으면 자식부터 지워야한다
 * 하지만 이런 번거로운 작업을 해결하기 위해 FK 제약조건 뒤에 ON DELETE CASCADE 옵션을 작성할 수 있다
 * 해당 옵션이 추가되면, 부모 삭제 시 참조중인 모든 자식 데이터가 자동으로 삭제된다
 * 
 *  */

SELECT * FROM TBL_BOOK;

ALTER TABLE TBL_BOOK
DROP CONSTRAINT FK_BOOK; -- DROP CONSTRANINT는 테이블에서 제약조건을 제거하는 명령

ALTER TABLE TBL_BOOK
ADD CONSTRAINT FK_BOOK FOREIGN KEY(MEMBER_NUMBER)
REFERENCES TBL_MEMBER(MEMBER_NUMBER) ON DELETE CASCADE;

-- 대여하기
UPDATE TBL_BOOK
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 1;

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 2;

SELECT * FROM TBL_BOOK;

-- 부모 테이블의 데이터 바로 삭제하기
SELECT * FROM TBL_MEMBER;

DELETE FROM TBL_MEMBER
WHERE MEMBER_NUMBER = 1;

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL, 'A', '로맨스', NULL);

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL, 'B', '추리', NULL);

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL, 'C', '인문학', NULL);

SELECT * FROM TBL_BOOK; -- DML 데이터 => TBL_BOOK 테이블 모든 컬럼 데이터 조회
SELECT * FROM TBL_MEMBER;

INSERT  INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '이유리', 20, '010-5678-5678', '서울시');

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 2
WHERE BOOK_CATEGORY = '인문학';

-- IS NULL
SELECT * FROM TBL_BOOK
WHERE MEMBER_NUMBER IS NULL;

SELECT * FROM TBL_BOOK
WHERE MEMBER_NUMBER IS NOT NULL;

SELECT * FROM TBL_BOOK;

-- NVL()
SELECT BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, NVL(MEMBER_NUMBER, 0) FROM TBL_BOOK;

-- NVL2()
SELECT BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, NVL2(MEMBER_NUMBER, '대여중', '대여가능')
FROM TBL_BOOK;

SELECT * FROM player;

-- player 테이블에서 TEAM_ID가 K01인 선수 조회
SELECT * FROM PLAYER
WHERE TEAM_ID = 'K01';

SELECT * FROM player;
/*1. PLAYER 테이블에서 WEIGHT가 70이상이고 80이하인 선수 검색*/
SELECT
	*
FROM
	player
WHERE
	WEIGHT >= 70
	AND WEIGHT <= 80;
/*2. PLAYER 테이블에서 TEAM_ID가 'K03'이고 HEIGHT가 180 미만인 선수 검색*/
SELECT
	*
FROM
	PLAYER
WHERE
	TEAM_ID = 'K03'
	AND HEIGHT < 180;
/*3. PLAYER 테이블에서 TEAM_ID가 'K06'이고 NICKNAME이 '제리'인 선수 검색*/
SELECT
	*
FROM
	PLAYER
WHERE
	TEAM_ID = 'K06'
	AND NICKNAME = '제리';
/*4. PLAYER 테이블에서 HEIGHT가 170이상이고 WEIGHT가 80이상인 선수 이름 검색*/
SELECT
	NAME
FROM
	PLAYER
WHERE
	HEIGHT >= 170
	AND WEIGHT >= 80;
/*5. STADIUM 테이블에서 SEAT_COUNT가 30000초과이고 41000이하인 경기장 검색*/
SELECT
	*
FROM
	STADIUM
WHERE
	SEAT_COUNT > 30000
	AND SEAT_COUNT <= 41000;
/*6. PLAYER 테이블에서 TEAM_ID가 'K02'이거나 'K07'이고 포지션은 'MF'인 선수 검색*/
SELECT
	*
FROM
	PLAYER
WHERE
	(TEAM_ID = 'K02'
		OR TEAM_ID = 'K07')
	AND POSITION = 'MF';


-- 롤백 테스트
-- PLAYER 테이블에서 TEAM_ID 가 'K01'인 선수이름을 내이름으로 바꾸기
-- 단, 매뉴얼 커밋이어야한다

SELECT * FROM PLAYER;

UPDATE PLAYER 
SET PLAYER_NAME = '김영선'
WHERE TEAM_ID = 'K01';

SELECT * FROM PLAYER
WHERE TEAM_ID = 'K01';

-- COMMIT;
-- ROLLBACK;

SELECT * FROM PLAYER;

UPDATE PLAYER 
SET PLAYER_NAME = 'A'
WHERE TEAM_ID = 'K01';






















